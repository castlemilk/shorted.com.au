syntax = "proto3";

package shorts.v1alpha1;

option go_package = "github.com/castlemilk/shorted.com.au/services/gen/proto/go/shorts/v1alpha1;shortsv1alpha1";

import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";
import "google/api/client.proto";
import "stocks/v1alpha1/stocks.proto";
option (gnostic.openapi.v3.document) = {
  info: {
    title: "Shorted API"
    version: "v1"
    description: "Shorted API's"
    contact: {
      name: "Ben Ebsworth"
      url: "shorted.com.au"
      email: "help@shorted.com.au"
    }
    license: {
      name: "Proprietary license"
      url: "https://shorted.com.au/terms"
    }
  }
  servers: {
    url: "https://api.shorted.com.au"
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BasicAuth"
          value: {
            security_scheme: {
              type: "http"
              scheme: "basic"
            }
          }
        }
      ]
    }
  }
};
service ShortedStocksService {
  option (google.api.default_host) = "api.shorted.com.au";
  
  // Shows top 10 short positions on the ASX over different periods of time.
  rpc GetTopShorts (GetTopShortsRequest) returns (GetTopShortsResponse) {
    option (google.api.method_signature) = "period,limit,offset";
    option (gnostic.openapi.v3.operation) = {
      deprecated: false,
      description: "Get the top shorts for a given period",
      responses: {
        response_or_reference: {
          name: "400"
          value: {
            response: {
              description: "Bad Request"
            }
          }
        },
        response_or_reference: {
          name: "200"
          value: {
            response: {
              description: "OK"
            }
          }
        }, 
      },
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth";
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }

  rpc GetIndustryTreeMap(GetIndustryTreeMapRequest) returns (stocks.v1alpha1.IndustryTreeMap) {
    option (gnostic.openapi.v3.operation) = {
      deprecated: false,
      description: "Get the industry treemap for a given period",
      responses: {
        response_or_reference: {
          name: "400"
          value: {
            response: {
              description: "Bad Request"
            }
          }
        },
        response_or_reference: {
          name: "200"
          value: {
            response: {
              description: "OK"
            }
          }
        }, 
      },
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth";
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }
  // Provides an overview of a specific stock based on PRODUCT_CODE.
  rpc GetStock (GetStockRequest) returns (stocks.v1alpha1.Stock) {
    option (gnostic.openapi.v3.operation) = {
      deprecated: false,
      description: "Get the stock summary for a given stock",
      responses: {
        response_or_reference: {
          name: "400"
          value: {
            response: {
              description: "Bad Request"
            }
          }
        },
        response_or_reference: {
          name: "200"
          value: {
            response: {
              description: "OK"
            }
          }
        } 
      },
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth";
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }
  // Provides a more in-depth breakdown of a particular stock's metadata.
  rpc GetStockDetails (GetStockDetailsRequest) returns (stocks.v1alpha1.StockDetails) {
    option (gnostic.openapi.v3.operation) = {
      deprecated: false,
      description: "Get the stock details for a given stock",
      responses: {
        response_or_reference: {
          name: "400"
          value: {
            response: {
              description: "Bad Request"
            }
          }
        },
        response_or_reference: {
          name: "200"
          value: {
            response: {
              description: "OK"
            }
          }
        } 
      },
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth";
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }
  // fetch time series data for a specific stock
  rpc GetStockData (GetStockDataRequest) returns (stocks.v1alpha1.TimeSeriesData) {
    option (gnostic.openapi.v3.operation) = {
      deprecated: false,
      description: "Get the stock data for a given stock",
      responses: {
        response_or_reference: {
          name: "400"
          value: {
            response: {
              description: "Bad Request"
            }
          }
        },
        response_or_reference: {
          name: "200"
          value: {
            response: {
              description: "OK"
            }
          }
        } 
      },
    };
  }
}

// Request for Top10 RPC, specifying the period of time.
message GetTopShortsRequest {
  string period = 1;
  int32 limit = 2;
  int32 offset = 3;
}

// Request for Top10 RPC, specifying the period of time.
message GetIndustryTreeMapRequest {
  // time over which to look at the max value
  string period = 1;
  // number of stocks to return for each parent
  int32 limit = 2;
  
  ViewMode view_mode = 3;
}

enum ViewMode {
   // return the current/latest short positions
   CURRENT_CHANGE = 0;
   // return the percentage change in short positions
   PERCENTAGE_CHANGE = 1;
}

// Response for Top10 RPC, including time series data for each of the top 10 short positions.
message GetTopShortsResponse {
  repeated stocks.v1alpha1.TimeSeriesData time_series = 1;
  int32 offset = 2;
}

// Request for GetStockSummary RPC, specifying the product code.
message GetStockRequest {
  string product_code = 1;
}

// Request for GetStockDetails RPC, specifying the product code.
message GetStockDetailsRequest {
  string product_code = 1;
}

// Request for GetStockDataRequest RPC, specifying the product code.
message GetStockDataRequest {
  string product_code = 1;
  string period = 2;
}