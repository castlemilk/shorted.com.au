// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: register/v1/register.proto

package registerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/castlemilk/shorted.com.au/services/gen/proto/go/register/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegisterServiceName is the fully-qualified name of the RegisterService service.
	RegisterServiceName = "register.v1.RegisterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegisterServiceRegisterEmailProcedure is the fully-qualified name of the RegisterService's
	// RegisterEmail RPC.
	RegisterServiceRegisterEmailProcedure = "/register.v1.RegisterService/RegisterEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	registerServiceServiceDescriptor             = v1.File_register_v1_register_proto.Services().ByName("RegisterService")
	registerServiceRegisterEmailMethodDescriptor = registerServiceServiceDescriptor.Methods().ByName("RegisterEmail")
)

// RegisterServiceClient is a client for the register.v1.RegisterService service.
type RegisterServiceClient interface {
	// Register an email address to receive updates.
	RegisterEmail(context.Context, *connect.Request[v1.RegisterEmailRequest]) (*connect.Response[v1.RegisterEmailResponse], error)
}

// NewRegisterServiceClient constructs a client for the register.v1.RegisterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegisterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegisterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &registerServiceClient{
		registerEmail: connect.NewClient[v1.RegisterEmailRequest, v1.RegisterEmailResponse](
			httpClient,
			baseURL+RegisterServiceRegisterEmailProcedure,
			connect.WithSchema(registerServiceRegisterEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// registerServiceClient implements RegisterServiceClient.
type registerServiceClient struct {
	registerEmail *connect.Client[v1.RegisterEmailRequest, v1.RegisterEmailResponse]
}

// RegisterEmail calls register.v1.RegisterService.RegisterEmail.
func (c *registerServiceClient) RegisterEmail(ctx context.Context, req *connect.Request[v1.RegisterEmailRequest]) (*connect.Response[v1.RegisterEmailResponse], error) {
	return c.registerEmail.CallUnary(ctx, req)
}

// RegisterServiceHandler is an implementation of the register.v1.RegisterService service.
type RegisterServiceHandler interface {
	// Register an email address to receive updates.
	RegisterEmail(context.Context, *connect.Request[v1.RegisterEmailRequest]) (*connect.Response[v1.RegisterEmailResponse], error)
}

// NewRegisterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegisterServiceHandler(svc RegisterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registerServiceRegisterEmailHandler := connect.NewUnaryHandler(
		RegisterServiceRegisterEmailProcedure,
		svc.RegisterEmail,
		connect.WithSchema(registerServiceRegisterEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/register.v1.RegisterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegisterServiceRegisterEmailProcedure:
			registerServiceRegisterEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegisterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegisterServiceHandler struct{}

func (UnimplementedRegisterServiceHandler) RegisterEmail(context.Context, *connect.Request[v1.RegisterEmailRequest]) (*connect.Response[v1.RegisterEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("register.v1.RegisterService.RegisterEmail is not implemented"))
}
