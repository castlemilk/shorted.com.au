// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file register/v1/register.proto (package register.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message register.v1.RegisterEmailRequest
 */
export class RegisterEmailRequest extends Message<RegisterEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<RegisterEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "register.v1.RegisterEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterEmailRequest {
    return new RegisterEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterEmailRequest {
    return new RegisterEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterEmailRequest {
    return new RegisterEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterEmailRequest | PlainMessage<RegisterEmailRequest> | undefined, b: RegisterEmailRequest | PlainMessage<RegisterEmailRequest> | undefined): boolean {
    return proto3.util.equals(RegisterEmailRequest, a, b);
  }
}

/**
 * @generated from message register.v1.RegisterEmailResponse
 */
export class RegisterEmailResponse extends Message<RegisterEmailResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<RegisterEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "register.v1.RegisterEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterEmailResponse {
    return new RegisterEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterEmailResponse {
    return new RegisterEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterEmailResponse {
    return new RegisterEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterEmailResponse | PlainMessage<RegisterEmailResponse> | undefined, b: RegisterEmailResponse | PlainMessage<RegisterEmailResponse> | undefined): boolean {
    return proto3.util.equals(RegisterEmailResponse, a, b);
  }
}

