// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file shorts/v1alpha1/shorts.proto (package shorts.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TimeSeriesData } from "../../stocks/v1alpha1/stocks_pb";

/**
 * @generated from enum shorts.v1alpha1.ViewMode
 */
export enum ViewMode {
  /**
   * return the current/latest short positions
   *
   * @generated from enum value: CURRENT_CHANGE = 0;
   */
  CURRENT_CHANGE = 0,

  /**
   * return the percentage change in short positions
   *
   * @generated from enum value: PERCENTAGE_CHANGE = 1;
   */
  PERCENTAGE_CHANGE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ViewMode)
proto3.util.setEnumType(ViewMode, "shorts.v1alpha1.ViewMode", [
  { no: 0, name: "CURRENT_CHANGE" },
  { no: 1, name: "PERCENTAGE_CHANGE" },
]);

/**
 * Request for Top10 RPC, specifying the period of time.
 *
 * @generated from message shorts.v1alpha1.GetTopShortsRequest
 */
export class GetTopShortsRequest extends Message<GetTopShortsRequest> {
  /**
   * @generated from field: string period = 1;
   */
  period = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  constructor(data?: PartialMessage<GetTopShortsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetTopShortsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopShortsRequest {
    return new GetTopShortsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopShortsRequest {
    return new GetTopShortsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopShortsRequest {
    return new GetTopShortsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopShortsRequest | PlainMessage<GetTopShortsRequest> | undefined, b: GetTopShortsRequest | PlainMessage<GetTopShortsRequest> | undefined): boolean {
    return proto3.util.equals(GetTopShortsRequest, a, b);
  }
}

/**
 * Request for Top10 RPC, specifying the period of time.
 *
 * @generated from message shorts.v1alpha1.GetIndustryTreeMapRequest
 */
export class GetIndustryTreeMapRequest extends Message<GetIndustryTreeMapRequest> {
  /**
   * time over which to look at the max value
   *
   * @generated from field: string period = 1;
   */
  period = "";

  /**
   * number of stocks to return for each parent
   *
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: shorts.v1alpha1.ViewMode view_mode = 3;
   */
  viewMode = ViewMode.CURRENT_CHANGE;

  constructor(data?: PartialMessage<GetIndustryTreeMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetIndustryTreeMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "view_mode", kind: "enum", T: proto3.getEnumType(ViewMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndustryTreeMapRequest {
    return new GetIndustryTreeMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndustryTreeMapRequest {
    return new GetIndustryTreeMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndustryTreeMapRequest {
    return new GetIndustryTreeMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndustryTreeMapRequest | PlainMessage<GetIndustryTreeMapRequest> | undefined, b: GetIndustryTreeMapRequest | PlainMessage<GetIndustryTreeMapRequest> | undefined): boolean {
    return proto3.util.equals(GetIndustryTreeMapRequest, a, b);
  }
}

/**
 * Response for Top10 RPC, including time series data for each of the top 10 short positions.
 *
 * @generated from message shorts.v1alpha1.GetTopShortsResponse
 */
export class GetTopShortsResponse extends Message<GetTopShortsResponse> {
  /**
   * @generated from field: repeated stocks.v1alpha1.TimeSeriesData time_series = 1;
   */
  timeSeries: TimeSeriesData[] = [];

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<GetTopShortsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetTopShortsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_series", kind: "message", T: TimeSeriesData, repeated: true },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopShortsResponse {
    return new GetTopShortsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopShortsResponse {
    return new GetTopShortsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopShortsResponse {
    return new GetTopShortsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopShortsResponse | PlainMessage<GetTopShortsResponse> | undefined, b: GetTopShortsResponse | PlainMessage<GetTopShortsResponse> | undefined): boolean {
    return proto3.util.equals(GetTopShortsResponse, a, b);
  }
}

/**
 * Request for GetStockSummary RPC, specifying the product code.
 *
 * @generated from message shorts.v1alpha1.GetStockRequest
 */
export class GetStockRequest extends Message<GetStockRequest> {
  /**
   * @generated from field: string product_code = 1;
   */
  productCode = "";

  constructor(data?: PartialMessage<GetStockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetStockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStockRequest {
    return new GetStockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStockRequest {
    return new GetStockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStockRequest {
    return new GetStockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStockRequest | PlainMessage<GetStockRequest> | undefined, b: GetStockRequest | PlainMessage<GetStockRequest> | undefined): boolean {
    return proto3.util.equals(GetStockRequest, a, b);
  }
}

/**
 * Request for GetStockDetails RPC, specifying the product code.
 *
 * @generated from message shorts.v1alpha1.GetStockDetailsRequest
 */
export class GetStockDetailsRequest extends Message<GetStockDetailsRequest> {
  /**
   * @generated from field: string product_code = 1;
   */
  productCode = "";

  constructor(data?: PartialMessage<GetStockDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetStockDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStockDetailsRequest {
    return new GetStockDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStockDetailsRequest {
    return new GetStockDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStockDetailsRequest {
    return new GetStockDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStockDetailsRequest | PlainMessage<GetStockDetailsRequest> | undefined, b: GetStockDetailsRequest | PlainMessage<GetStockDetailsRequest> | undefined): boolean {
    return proto3.util.equals(GetStockDetailsRequest, a, b);
  }
}

/**
 * Request for GetStockDataRequest RPC, specifying the product code.
 *
 * @generated from message shorts.v1alpha1.GetStockDataRequest
 */
export class GetStockDataRequest extends Message<GetStockDataRequest> {
  /**
   * @generated from field: string product_code = 1;
   */
  productCode = "";

  /**
   * @generated from field: string period = 2;
   */
  period = "";

  constructor(data?: PartialMessage<GetStockDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shorts.v1alpha1.GetStockDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStockDataRequest {
    return new GetStockDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStockDataRequest {
    return new GetStockDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStockDataRequest {
    return new GetStockDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStockDataRequest | PlainMessage<GetStockDataRequest> | undefined, b: GetStockDataRequest | PlainMessage<GetStockDataRequest> | undefined): boolean {
    return proto3.util.equals(GetStockDataRequest, a, b);
  }
}

